<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kingIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum kingStates { idle,
    run,
    attack,
    jump,
    doorIn,
    doorOut,
    hit
}

state = kingStates.idle;
// abilities
spd = 3;
grav = 1;
moveX = 0;
moveY = 0;
counter = 0;
hp = 3

// others
audio_play_sound(sou_main, 2, true);
audio_stop_sound(sou_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_getinput();

switch (state) {
    case (kingStates.idle):
        scr_king_idle();
        break;
    case (kingStates.attack):
        scr_king_attack();
        break;
    case (kingStates.run):
        scr_king_run();
        break;
    case (kingStates.jump):
        scr_king_jump();
        break;
    case (kingStates.doorIn):
        scr_king_doorIn();
        break;
    case (kingStates.doorOut):
        scr_king_doorOut();
        break;
    case (kingStates.hit) :
        scr_king_hit();
        break;
}

//PHYSICS
if (moveY &lt; 10)
{
    moveY = min(moveY + grav, 9);
}

//COLLISION CHECK
if (place_meeting(x, y + moveY, o_ground))
{
        while (not place_meeting(x, y + sign(moveY), o_ground))
        {
            y += sign(moveY);                  
        }
    if (moveY &gt; 1) {
        audio_play_sound(sou_grounding,1 , false); 
    }
            
    moveY = 0;
}

if (place_meeting(x + moveX, y - 2, obj_box))
{
        while (not place_meeting(x + sign(moveX), y - 2, obj_box))
        {
            x += sign(moveX);
        }
                
    moveX = 0;
}

if (place_meeting(x + moveX, y - 2, o_ground))
{
        while (not place_meeting(x + sign(moveX), y - 2, o_ground))
        {
            x += sign(moveX);
        }
                
    moveX = 0;
}

if (place_meeting(x, y, obj_ball)) {
    effect_create_above(ef_explosion, x, y, 0, c_white);
    with (obj_ball) instance_destroy();
    audio_play_sound(sou_explosion, 1, false);
    
    state = kingStates.hit;
    
}

// Apply Movement
x += moveX;
y += moveY;

// Sprite controller
if (pressLeft + pressRight != 0) {
    image_xscale = sign(pressRight - pressLeft);
}

if (hp &lt;= 0) {
    sprite_index = spr_kingDead;
    audio_stop_all();
    state4 = cannonStates.idle;
    state3 = pigStates.matchOn;
    obj_pig.image_speed = 0;
    if (image_index &gt;= image_number-1) { 
        show_message("You lose");
        game_restart();
    }
}

if (pressR) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
